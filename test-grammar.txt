start{
	"first room";
	"Welcome to the first room";
}

item{
	(apple);
	.item_name "apple";
	.adjectives [sour, green];
	.synonyms ["green fruit"];
	.item_knowledge ['apple::randomTrait9 := "happy"', 'first_room.apple::preliminary := 4.0'];
}

item{
	(banana);
	.item_name "banana";
	.adjectives [];
	.synonyms ["plantain"];
	.item_knowledge ['banana::randomTrait9 := "happy"'];
}

precond{
	(appleMass);
	'apple::mass > 4.0' ("The mass is not right. It is apple::mass");
}


precond{
	(itemsCond);
	'world::items IS []' ("The inventory is nto right. It is world::items");
}

postcond{
	(appleNewMass);
	'world::applesCollected := 5.0';
}

postcond{
	(appleNewVolume);
	'apple::mass := 3.0';
}



action{
	(putActionOne);
	.action_triggers [put-0, put-1];
	.args [#(banana), #(apple)];
	.preconds [#(appleMass), #(itemsCond), 'apple::isContainer' ("The apple is not a container. It is apple:isContainer"), 'world::inventory IS []' ("The inventory is not empty")];
	.postconds [#(appleNewMass),#(appleNewVolume), 'apple::isContainer := true', 'world::randomState := 4.0'];
	.success_msg "You succeeded. world::randomState is random state";
}

action{
	(examineTwo);
	.action_triggers [examine];
	.args [#(banana)];
	.preconds [#(appleMass)];
	.postconds [];
	.success_msg "The apple is green and juicy. It is banana::randomTrait9";
}

room{
	.room_name "first room";
	.actions #(putActionOne), #(examineTwo);
	.items "orange", #(apple), "apple", #(banana);
}

add_trigger{
	#(putActionOne);
	.room "first room";
	.action_triggers [eat, open];
	.args [#(banana)];
}


custom_trigger{
	move;
}






generic_frame{
	"fruit";
	[fruitiness<-'4.0', elasticity<-'"high"'];
}

knowledge{
	.generic_inheritance [#(apple), "first_room.banana"] inherits "fruit", [#(apple)] inherits "container";
	.initial ['first_room.banana::mass := 1000', 'first_room.apple::name := "apple"'];
}


